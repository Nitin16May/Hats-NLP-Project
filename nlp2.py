# -*- coding: utf-8 -*-
"""NLP2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1US0Yw7j2p7ouzL-QkUq3Qr-gO0NLGGKs
"""


import spacy
from spacy import displacy
from spacy import tokenizer
from spacy.scorer import Scorer
from spacy.tokens import Doc
from spacy.training import Example
nlp = spacy.load('en_core_web_sm')

nlp = spacy.load('en_core_web_sm')
def evaluate(examples):
    scorer = Scorer()
    example = []

    for input_, annot in examples:
        pred = nlp.make_doc(input_)
        # print(pred)
        temp = Example.from_dict(pred, annot)
        # temp.predicted = nlp(str(example.predicted))
        example.append(temp)
    scores = nlp.evaluate(example)
    return scores

def fun(tn, sm, smm):
    text = ""
    for line in tn:
        text = line
        doc = nlp(text)
        # ents = [(e.text, e.start_char, e.end_char, e.label_) for e in doc.ents]
        temp = (line[:len(line) - 1], {'entities': [(e.start_char, e.end_char, e.label_) for e in doc.ents]})  # extracting entites from the line
        sm.append(temp)
    results = evaluate(smm)  # evaluating the model
    print(sm)
    print("Precision {:0.4f}\tRecall {:0.4f}\tF-score {:0.4f}".format(results['ents_p'], results['ents_r'], results['ents_f']))


t2 = open("passage.txt", encoding="utf8")
t3=open("passage2.txt",encoding="utf8")
t4=open("passage3.txt",encoding="utf8")

ex = []
ey=[]
ez=[]
exx = [
    ('At this order a lay-brother swung open the door, and two other lay-brothers entered leading ', {'entities': []}),
    ('headed, with a peculiar half-humorous, half-defiant expression upon his bold, well-marked ', {'entities': []}),
    ('white shirt, looped up upon one side, gave a glimpse of a huge knotty leg, scarred and torn ', {'entities': []}),
    ('with the scratches of brambles. With a bow to the Abbot, which had in it perhaps more ', {'entities': [(22, 30, 'ORG'), (50, 55, 'PERSON')]}),
    ('the private orisons of the Abbot’s own household. His dark eyes glanced rapidly over the ', {'entities': [(27, 32, 'PERSON')]}),
    ('assembly, and finally settled with a grim and menacing twinkle upon the face of his accuser. ', {'entities': []})
]

exx3 =[
('Further on, at the edge of the woodland, he came upon a chapman and his wife, who sat upon ', {'entities': [(31, 39, 'ORG'), (56, 62, 'PERSON')]}),
('a fallen tree. He had put his pack down as a table, and the two of them were devouring a great ', {'entities' : []}),
('pasty, and washing i down with some drink from a stone jar. The chapman broke a rough jest ', {'entities' : [(65, 71, 'PERSON')]}),
('as he passed, and the woman called shrilly to Alleyne to come and join them, on which the ', {'entities' : [(35, 41, 'PERSON'), (46, 52, 'PERSON')]}),
('man, turning suddenly from mirth to wrath, began to belabor her with his cudgel. Alleyne ' , {'entities' : [(81, 87, 'PERSON')]}),
('hastened on, lest he make more mischief, and his heart was heavy as lead within him. Look ' ,{'entities' : []}),
('where he would, he seemed to see nothing but injustice and violence and the hardness of man to man. ' , {'entities' : []})
]


exx2 = [
    ('The night had already fallen, and the moon was shining between the rifts of ragged, drifting' ,{'entities' : []}),
('clouds, before Alleyne Edricson, footsore and weary from the unwonted exercise, found ' , {'entities' : [ (15,30,'PERSON')]}),
('himself in front of the forest inn which stood upon the outskirts of Lyndhurst. The building ' , {'entities' : [ (70,78,'LOC')]}),
('was long and low, standing back a little from the road, with two flambeaux blazing on either' ,{'entities' : []}),
('side of the door as a welcome to the traveller. From one window there thrust forth a long pole' ,{'entities' : []}),
('with a bunch of greenery tied to the end of it—a sign that liquor was to be sold within. As' ,{'entities' : []}),
('Alleyne walked up to it he perceived that it was rudely fashioned out of beams of wood, with ' , {'entities' : [ (0,6,'PERSON')]}),
('twinkling lights all over where the glow from within shone through the chinks. The roof was' ,{'entities' : []}),
('poor and thatched; but in strange contrast to it there ran all along under the eaves a line of' ,{'entities' : []}),
('wooden shields, most gorgeously painted with chevron, bend, and saltire, and every heraldic ' , {'entities' : [ (45,52,'ORG')]}),
('device. By the door a horse stood tethered, the ruddy glow beating strongly upon his brown' ,{'entities' : []}),
('head and patient eyes, while his body stood back in the shadow.' ,{'entities' : []})
]

fun(t2,ex,exx)
fun(t4,ez,exx2)
fun(t3,ey,exx3)

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import seaborn as sns
import matplotlib.pyplot as plt

import re
from collections import defaultdict


with open('book1.txt', 'r') as file:
  data = file.read()


# Assuming chapters are separated by 'Chapter {number}'
chapters= re.split(r'Chapter', data)[39:]
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(chapters)
sim_mat = cosine_similarity(tfidf_matrix)

max_sim = 0
index = (0, 0)

# Compare all pairs of documents to find the most similar
for i in range(len(chapters)):
    for j in range(i + 1, len(chapters)):
        sim = sim_mat[i, j]
        if sim > max_sim:
            max_sim = sim
            index = (i, j)

# Print the similarity matrix
print("Cosine Similarity Matrix:")
print(sim_mat)

# Print the indices of the two most similar documents
print("\nIndices of the Two Most Similar Documents:", index)

sns.heatmap(sim_mat,cmap='YlGnBu')
plt.title('Cosine Similarity Matrix')
plt.show()